import React from 'react';

const CodeBlock = ({ title, content }) => (
  <div style={{ marginBottom: '2rem' }}>
    <h3 style={{ borderBottom: '1px solid #ccc', paddingBottom: '5px', marginBottom: '10px' }}>
      File: <code style={{ backgroundColor: '#e0e0e0', padding: '2px 5px', borderRadius: '4px' }}>{title}</code>
    </h3>
    <pre style={{
      backgroundColor: '#2d2d2d',
      color: '#f0f0f0',
      padding: '15px',
      borderRadius: '8px',
      overflowX: 'auto',
      whiteSpace: 'pre-wrap',
      wordBreak: 'break-all',
      fontSize: '12px'
    }}>
      <code>{content}</code>
    </pre>
  </div>
);

export default function TheSystem() {
  const fileContents = {
    // ========================================================================
    // BACKEND FILES
    // ========================================================================
    "backend/package.json": `{
  "name": "ray-dashboard-backend",
  "version": "1.0.0",
  "description": "Local backend server for Ray's Dashboard",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "ws": "^8.13.0",
    "node-cron": "^3.0.2",
    "axios": "^1.4.0",
    "fs-extra": "^11.1.1"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}`,
    "backend/server.js": `const express = require('express');
const cors = require('cors');
const WebSocket = require('ws');
const cron = require('node-cron');
const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');
const http = require('http');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

const PORT = process.env.PORT || 3001;
const dataDir = path.join(__dirname, 'data');
const tempDir = path.join(__dirname, 'temp');
const configPath = path.join(dataDir, 'config.json');

// Ensure directories exist
fs.ensureDirSync(dataDir);
fs.ensureDirSync(tempDir);
fs.ensureDirSync(path.join(dataDir, 'photos')); // Ensure photos subdir exists

// Default configuration
const defaultConfig = {
  elevenlabs_api_key: '',
  elevenlabs_voice_id: '',
  weather_location: 'Sydney, Australia',
  schedule: [],
  widgets: [],
  photos: [],
  voice_prompts: [],
  bob_commands: [],
  settings: {
    reminder_template_60_min: 'This is a reminder. In 60 minutes, you have [script].',
    reminder_template_30_min: 'This is a reminder. In 30 minutes, you have [script].',
    schedule_readout_template: 'Between [start_time] and [end_time], you have [script].',
    model_id: 'eleven_multilingual_v2',
    stability: 0.5,
    similarity_boost: 0.75,
    style: 0.5
  }
};

// Load configuration
let config = { ...defaultConfig };
try {
  if (fs.existsSync(configPath)) {
    const loaded = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    config = { ...defaultConfig, ...loaded, settings: {...defaultConfig.settings, ...(loaded.settings || {})}};
    console.log('Configuration loaded successfully');
  } else {
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
    console.log('Default configuration created.');
  }
} catch (error) {
  console.error('Error loading config:', error);
  fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
}

// Save configuration
function saveConfig() {
  try {
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
    console.log('Configuration saved.');
  } catch (error) {
    console.error('Error saving config:', error);
  }
}

// Connected clients for WebSocket
const connectedClients = new Set();

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use('/temp', express.static(tempDir));
app.use('/photos', express.static(path.join(dataDir, 'photos')));

// === API ROUTES ===

// Get all configuration
app.get('/api/config', (req, res) => {
  res.json(config);
});

// Update configuration
app.post('/api/config', (req, res) => {
  config = { ...config, ...req.body, settings: { ...config.settings, ...(req.body.settings || {}) } };
  saveConfig();
  res.json({ success: true, message: 'Configuration updated' });
});

// Photo upload
app.post('/api/photos/upload', (req, res) => {
    if (!req.body.file) {
        return res.status(400).json({ error: 'No file data received.' });
    }
    try {
        const base64Data = req.body.file.replace(/^data:image\\/\\w+;base64,/, "");
        const buffer = Buffer.from(base64Data, 'base64');
        const filename = \`photo_\${Date.now()}.png\`;
        const filePath = path.join(dataDir, 'photos', filename);
        fs.writeFileSync(filePath, buffer);
        const fileUrl = \`http://localhost:\${PORT}/photos/\${filename}\`;
        res.json({ success: true, url: fileUrl });
    } catch (error) {
        console.error('Error uploading file:', error);
        res.status(500).json({ error: 'Failed to save file.' });
    }
});

// Weather proxy
app.get('/api/weather', async (req, res) => {
  if (!process.env.OPENWEATHER_API_KEY) {
    return res.status(500).json({ error: 'Weather service not configured on server.' });
  }
  const location = config.weather_location || 'Sydney,AU';
  try {
    const geoUrl = \`http://api.openweathermap.org/geo/1.0/direct?q=\${location}&limit=1&appid=\${process.env.OPENWEATHER_API_KEY}\`;
    const geoRes = await axios.get(geoUrl);
    if (!geoRes.data || geoRes.data.length === 0) {
      return res.status(404).json({ error: 'Location not found' });
    }
    const { lat, lon } = geoRes.data[0];
    
    const weatherUrl = \`https://api.openweathermap.org/data/2.5/onecall?lat=\${lat}&lon=\${lon}&exclude=minutely,hourly,alerts&units=metric&appid=\${process.env.OPENWEATHER_API_KEY}\`;
    const weatherRes = await axios.get(weatherUrl);
    res.json(weatherRes.data);
  } catch (error) {
    console.error('Weather API error:', error.message);
    res.status(500).json({ error: 'Failed to fetch weather data.' });
  }
});


// === WEBSOCKET LOGIC ===
wss.on('connection', (ws) => {
    console.log('Client connected to WebSocket');
    connectedClients.add(ws);
    ws.on('close', () => {
        console.log('Client disconnected');
        connectedClients.delete(ws);
    });
    ws.on('message', (message) => {
        console.log('received: %s', message);
    });
});

function broadcast(data) {
    const message = JSON.stringify(data);
    connectedClients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(message);
        }
    });
}

// === ELEVENLABS TTS ===
async function generateAudio(text) {
    if (!config.elevenlabs_api_key || !config.elevenlabs_voice_id) {
        console.error('ElevenLabs API key or Voice ID not configured');
        return null;
    }
    const url = \`https://api.elevenlabs.io/v1/text-to-speech/\${config.elevenlabs_voice_id}\`;
    const headers = {
        'Accept': 'audio/mpeg',
        'Content-Type': 'application/json',
        'xi-api-key': config.elevenlabs_api_key,
    };
    const body = {
        text: text,
        model_id: config.settings.model_id || 'eleven_multilingual_v2',
        voice_settings: {
            stability: config.settings.stability,
            similarity_boost: config.settings.similarity_boost,
            style: config.settings.style,
        },
    };
    try {
        const response = await axios.post(url, body, { headers, responseType: 'arraybuffer' });
        const audioBuffer = Buffer.from(response.data, 'binary');
        const tempFilename = \`audio_\${Date.now()}.mp3\`;
        const tempPath = path.join(tempDir, tempFilename);
        fs.writeFileSync(tempPath, audioBuffer);
        return \`http://localhost:\${PORT}/temp/\${tempFilename}\`;
    } catch (error) {
        console.error('ElevenLabs API Error:', error.response ? error.response.data.toString() : error.message);
        return null;
    }
}

app.post('/api/speak', async (req, res) => {
    const { text } = req.body;
    if (!text) {
        return res.status(400).json({ error: 'Text is required' });
    }
    const audioUrl = await generateAudio(text);
    if (audioUrl) {
        broadcast({ type: 'play_audio', url: audioUrl });
        res.json({ success: true, url: audioUrl });
    } else {
        res.status(500).json({ error: 'Failed to generate audio' });
    }
});


// === SCHEDULER ===
// Runs every minute
cron.schedule('* * * * *', () => {
    const now = new Date();
    const currentTime = \`\${String(now.getHours()).padStart(2, '0')}:\${String(now.getMinutes()).padStart(2, '0')}\`;

    // Check voice prompts
    (config.voice_prompts || []).forEach(async (prompt) => {
        if (prompt.is_active && prompt.time === currentTime) {
            console.log(\`Triggering prompt: "\${prompt.script}"\`);
            const audioUrl = await generateAudio(prompt.script);
            if (audioUrl) {
                broadcast({ type: 'play_audio', url: audioUrl });
            }
        }
    });

    // Check schedule reminders
    (config.schedule || []).forEach(async (item) => {
      if (!item.is_active || !item.start_time) return;

      const [startHour, startMinute] = item.start_time.split(':').map(Number);
      const appointmentTime = new Date();
      appointmentTime.setHours(startHour, startMinute, 0, 0);

      const diffMinutes = (appointmentTime.getTime() - now.getTime()) / 60000;

      // 60-min reminder
      if (Math.round(diffMinutes) === 60) {
        const reminderText = config.settings.reminder_template_60_min.replace('[script]', item.voice_script || item.title);
        console.log(\`Triggering 60-min reminder for: \${item.title}\`);
        const audioUrl = await generateAudio(reminderText);
        if (audioUrl) {
            broadcast({ type: 'play_audio', url: audioUrl });
        }
      }

      // 30-min reminder
      if (Math.round(diffMinutes) === 30) {
        const reminderText = config.settings.reminder_template_30_min.replace('[script]', item.voice_script || item.title);
        console.log(\`Triggering 30-min reminder for: \${item.title}\`);
        const audioUrl = await generateAudio(reminderText);
        if (audioUrl) {
            broadcast({ type: 'play_audio', url: audioUrl });
        }
      }
    });
});

// Clean up temp audio files older than 1 hour on startup
fs.readdir(tempDir, (err, files) => {
    if (err) return console.error("Could not list temp directory.", err);
    files.forEach((file, index) => {
        const filePath = path.join(tempDir, file);
        fs.stat(filePath, (err, stat) => {
            if (err) return console.error("Error stating file.", err);
            const now = new Date().getTime();
            const endTime = new Date(stat.ctime).getTime() + 3600000; // 1 hour
            if (now > endTime) {
                fs.unlink(filePath, (err) => {
                    if (err) return console.error("Error deleting file.", err);
                    console.log(\`Deleted old temp file: \${file}\`);
                });
            }
        });
    });
});


// Start server
server.listen(PORT, () => {
  console.log(\`Backend server running on http://localhost:\${PORT}\`);
  console.log('Data is stored in:', dataDir);
  console.log('To get weather, set OPENWEATHER_API_KEY in your environment.');
});`,
    
    // ========================================================================
    // FRONTEND FILES
    // ========================================================================
    "frontend/package.json": `{
  "name": "ray-dashboard-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "axios": "^1.4.0",
    "date-fns": "^2.30.0",
    "lucide-react": "^0.263.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}`,
    "frontend/public/index.html": `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Ray's Dashboard"
    />
    <title>Ray's Dashboard</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`,
    "frontend/src/index.css": `body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f3f4f6;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

* {
  box-sizing: border-box;
}
`,
    "frontend/src/App.js": `import React, { useState, useEffect } from 'react';
import Dashboard from './pages/Dashboard';
import Admin from './pages/Admin';
import { VoiceProvider } from './context/VoiceProvider';

function App() {
  const [page, setPage] = useState('dashboard');

  useEffect(() => {
    const handleHashChange = () => {
      if (window.location.hash === '#admin') {
        setPage('admin');
      } else {
        setPage('dashboard');
      }
    };

    window.addEventListener('hashchange', handleHashChange);
    handleHashChange(); // Check on initial load

    return () => {
      window.removeEventListener('hashchange', handleHashChange);
    };
  }, []);

  return (
    <VoiceProvider>
      {page === 'admin' ? <Admin /> : <Dashboard />}
    </VoiceProvider>
  );
}

export default App;`,
    "frontend/src/index.js": `import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,
    "frontend/src/context/VoiceProvider.js": `import React, { createContext, useContext, useState, useEffect, useRef } from 'react';

const VoiceContext = createContext(null);
export const useVoice = () => useContext(VoiceContext);

export function VoiceProvider({ children }) {
  const [isSpeaking, setIsSpeaking] = useState(false);
  const audioQueue = useRef([]);
  const [lastPlayedUrl, setLastPlayedUrl] = useState('');
  const [ws, setWs] = useState(null);

  useEffect(() => {
    function connect() {
      const socket = new WebSocket('ws://localhost:3001');
      
      socket.onopen = () => {
        console.log('WebSocket Connected');
        setWs(socket);
      };

      socket.onmessage = (event) => {
        const data = JSON.parse(event.data);
        if (data.type === 'play_audio' && data.url) {
          console.log('Received audio to play from server:', data.url);
          audioQueue.current.push(data.url);
          setLastPlayedUrl(prev => prev + ' '); // Force re-render
        }
      };

      socket.onclose = () => {
        console.log('WebSocket Disconnected. Reconnecting...');
        setTimeout(connect, 3000);
      };

      socket.onerror = (err) => {
        console.error('WebSocket Error:', err.message);
        socket.close();
      };
    }
    connect();

    return () => {
      if (ws) ws.close();
    };
  }, []);

  useEffect(() => {
    if (isSpeaking || audioQueue.current.length === 0) {
      return;
    }

    const audioUrl = audioQueue.current.shift();
    if (audioUrl) {
      setIsSpeaking(true);
      const audio = new Audio(audioUrl);
      audio.play().catch(e => console.error("Audio play failed", e));
      audio.onended = () => {
        setIsSpeaking(false);
      };
      audio.onerror = () => {
        setIsSpeaking(false);
        console.error("Error playing audio:", audioUrl);
      };
    }
  }, [isSpeaking, lastPlayedUrl]);

  const value = { isSpeaking };

  return (
    <VoiceContext.Provider value={value}>
      {children}
    </VoiceContext.Provider>
  );
}`,
    "frontend/src/pages/Dashboard.js": `import React from 'react';
import HeaderBar from '../components/dashboard/HeaderBar';
import ScheduleSection from '../components/dashboard/ScheduleSection';
import WidgetsSection from '../components/dashboard/WidgetsSection';
import FavoritePhotos from '../components/dashboard/FavoritePhotos';
import SmartTalkButton from '../components/dashboard/SmartTalkButton';

export default function Dashboard() {
  return (
    <div className="dashboard-root">
      <HeaderBar />
      
      <div className="dashboard-main-container">
        <div className="dashboard-schedule-locked">
          <ScheduleSection />
        </div>
        
        <div className="dashboard-middle-container">
          <FavoritePhotos />
        </div>
        
        <div className="dashboard-widgets-container">
          <WidgetsSection />
        </div>
      </div>

      <div className="dashboard-talk-button-container">
        <SmartTalkButton />
      </div>

      <style jsx>{\`
        .dashboard-root {
          width: 100%;
          height: 100vh;
          background-color: #f3f4f6;
          box-sizing: border-box;
          overflow: hidden;
          display: flex;
          flex-direction: column;
        }

        .dashboard-main-container {
          display: grid;
          grid-template-columns: 1.2fr 1.2fr 1.6fr;
          flex-grow: 1;
          gap: 16px;
          padding: 16px;
          padding-top: 16px;
          padding-bottom: 8px;
          min-height: 0;
          overflow: hidden;
        }

        .dashboard-schedule-locked,
        .dashboard-middle-container,
        .dashboard-widgets-container {
          min-width: 0;
          min-height: 0;
          overflow: hidden;
          display: flex;
          flex-direction: column;
        }
        
        .dashboard-talk-button-container {
          flex-shrink: 0; 
          padding: 8px 16px 16px 16px;
        }
      \`}</style>
    </div>
  );
}`,
    "frontend/src/pages/Admin.js": `import React, { useState } from 'react';
import ScheduleAdmin from '../components/admin/ScheduleAdmin';
import WidgetAdmin from '../components/admin/WidgetAdmin';
import PhotoAdmin from '../components/admin/PhotoAdmin';
import VoicePromptAdmin from '../components/admin/VoicePromptAdmin';
import VoiceSettingsAdmin from '../components/admin/VoiceSettingsAdmin';
import BobCommandAdmin from '../components/admin/BobCommandAdmin';
import { Settings, Calendar, Grid3x3, Camera, Mic, ArrowLeft, MessageSquare } from 'lucide-react';

export default function Admin() {
  const [activeTab, setActiveTab] = useState('schedule');

  const tabs = {
    schedule: <ScheduleAdmin />,
    prompts: <VoicePromptAdmin />,
    bob: <BobCommandAdmin />,
    widgets: <WidgetAdmin />,
    photos: <PhotoAdmin />,
    voice: <VoiceSettingsAdmin />,
  };
  
  const tabIcons = {
    schedule: Calendar,
    prompts: MessageSquare,
    bob: Mic,
    widgets: Grid3x3,
    photos: Camera,
    voice: Settings,
  };

  const tabNames = {
    schedule: 'Appointments',
    prompts: 'Voice Prompts',
    bob: 'Bob Commands',
    widgets: 'Widgets',
    photos: 'Photos',
    voice: 'Voice & Settings',
  };

  return (
    <div style={{minHeight: '100vh', backgroundColor: '#f1f5f9', padding: '24px'}}>
      <div style={{maxWidth: '1400px', margin: '0 auto'}}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '32px' }}>
          <h1 style={{fontSize: '2rem', fontWeight: 'bold', color: '#1f2937'}}>Dashboard Admin</h1>
          <a href="/#" style={{display: 'flex', alignItems: 'center', gap: '8px', padding: '8px 16px', border: '1px solid #ccc', borderRadius: '6px', textDecoration: 'none', color: '#333'}}>
            <ArrowLeft size={16} />
            Back to Dashboard
          </a>
        </div>

        <div style={{display: 'flex'}}>
          <div style={{width: '250px', borderRight: '1px solid #e5e7eb', paddingRight: '16px'}}>
            {Object.keys(tabs).map(tabId => {
              const Icon = tabIcons[tabId];
              return (
                <button
                  key={tabId}
                  onClick={() => setActiveTab(tabId)}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '12px',
                    width: '100%',
                    padding: '12px 16px',
                    border: 'none',
                    textAlign: 'left',
                    borderRadius: '8px',
                    cursor: 'pointer',
                    backgroundColor: activeTab === tabId ? '#e0f2fe' : 'transparent',
                    color: activeTab === tabId ? '#0284c7' : '#374151',
                    fontWeight: activeTab === tabId ? '600' : '500',
                    marginBottom: '8px'
                  }}
                >
                  <Icon size={20} />
                  <span>{tabNames[tabId]}</span>
                </button>
              );
            })}
          </div>
          <div style={{flex: 1, paddingLeft: '24px'}}>
            <div style={{backgroundColor: '#fff', borderRadius: '12px', boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)'}}>
              {tabs[activeTab]}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}`,
    "frontend/src/components/dashboard/HeaderBar.js": `import React, { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { Sun, Cloud, CloudRain, Loader2, Wind, Snowflake, Zap, CloudDrizzle, Thermometer } from 'lucide-react';
import axios from 'axios';

const weatherIcons = {
  "clear sky": Sun, "few clouds": Sun, "scattered clouds": Cloud, "broken clouds": Cloud, "overcast clouds": Cloud,
  "shower rain": CloudRain, "rain": CloudRain, "light rain": CloudRain, "moderate rain": CloudRain,
  "drizzle": CloudDrizzle, "thunderstorm": Zap, "snow": Snowflake, "mist": Wind
};

const getWeatherIcon = (condition) => {
  const normalizedCondition = condition.toLowerCase();
  for (const key in weatherIcons) {
    if (normalizedCondition.includes(key)) {
      const Icon = weatherIcons[key];
      return <Icon className="w-10 h-10 text-white/90" />;
    }
  }
  return <Cloud className="w-10 h-10 text-white/80" />;
};


export default function HeaderBar() {
  const [currentTime, setCurrentTime] = useState(new Date());
  const [weather, setWeather] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    
    const fetchWeather = async () => {
      try {
        const response = await axios.get('http://localhost:3001/api/weather');
        setWeather(response.data);
      } catch (error) {
        console.error("Failed to fetch weather:", error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchWeather();
    const weatherInterval = setInterval(fetchWeather, 30 * 60 * 1000); // every 30 mins

    return () => {
      clearInterval(timer);
      clearInterval(weatherInterval);
    };
  }, []);

  const renderWeather = () => {
    if (loading) return <Loader2 className="w-5 h-5 animate-spin" />;
    if (!weather) return <div>Weather unavailable</div>;

    return (
      <div style={{display: 'flex', alignItems: 'center', gap: '24px'}}>
        <div style={{display: 'flex', alignItems: 'center', gap: '12px'}}>
            {getWeatherIcon(weather.current.weather[0].description)}
            <div>
                <div style={{fontSize: '2.5rem', fontWeight: 'bold'}}>{Math.round(weather.current.temp)}°C</div>
                <div style={{opacity: 0.8, textTransform: 'capitalize'}}>{weather.current.weather[0].description}</div>
            </div>
        </div>
      </div>
    );
  };

  return (
    <div style={{
      background: 'linear-gradient(135deg, #0891b2 0%, #0c4a6e 100%)',
      color: 'white', padding: '32px', minHeight: '140px',
      display: 'flex', justifyContent: 'space-between', alignItems: 'center'
    }}>
        <div>
            <div style={{fontSize: '3rem', fontWeight: 'bold'}}>
                {format(currentTime, 'h:mm')}
                <span style={{fontSize: '1.5rem', marginLeft: '8px', opacity: 0.8}}>{format(currentTime, 'a')}</span>
            </div>
            <div style={{fontSize: '1.125rem', opacity: 0.8, marginTop: '4px'}}>
                {format(currentTime, 'EEEE, do MMMM yyyy')}
            </div>
        </div>
        <div>
            {renderWeather()}
        </div>
    </div>
  );
}`,
    "frontend/src/components/dashboard/ScheduleSection.js": `import React, { useState, useEffect } from 'react';
import axios from 'axios';

export default function ScheduleSection() {
  const [scheduleItems, setScheduleItems] = useState([]);

  useEffect(() => {
    const loadSchedule = async () => {
      try {
        const response = await axios.get('http://localhost:3001/api/config');
        const items = response.data.schedule || [];
        const activeItems = items.filter(item => item.is_active);
        const sorted = activeItems.sort((a, b) => (a.start_time || "").localeCompare(b.start_time || ""));
        setScheduleItems(sorted.slice(0, 5));
      } catch (error) {
        console.error('Failed to load schedule:', error);
      }
    };
    
    loadSchedule();
    const intervalId = setInterval(loadSchedule, 30000);
    return () => clearInterval(intervalId);
  }, []);

  const displayItems = Array(5).fill(null).map((_, index) => 
    scheduleItems[index] || null
  );

  return (
    <div style={{ padding: '16px 0', height: '100%', display: 'flex', flexDirection: 'column' }}>
      <div style={{
        borderRadius: '16px', padding: '20px', height: '100%',
        display: 'flex', flexDirection: 'column', backgroundColor: '#f8fafc',
        border: '1px solid #e5e7eb', boxShadow: '5px 5px 15px #e5e7eb, -5px -5px 15px #ffffff'
      }}>
        <h2 style={{ fontSize: '1.5rem', fontWeight: '600', color: '#1f2937', marginBottom: '16px' }}>
          Ray's Dashboard
        </h2>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '12px', flexGrow: 1 }}>
          {displayItems.map((item, index) => (
            <div key={item?.id || index} style={{
              borderRadius: '12px', padding: '16px', flex: '1', backgroundColor: '#ffffff',
              borderLeft: '4px solid #2563eb', boxShadow: '0 2px 8px rgba(0,0,0,0.06)'
            }}>
              {item ? (
                <>
                  <div style={{ fontSize: '1.1rem', fontWeight: '700', color: '#2563eb', marginBottom: '4px' }}>
                    {item.start_time}{item.end_time ? \` - \${item.end_time}\` : ''}
                  </div>
                  <div style={{ fontSize: '1rem', fontWeight: '600', color: '#1f2937', marginBottom: '2px' }}>
                    {item.title}
                  </div>
                </>
              ) : (
                <div style={{ color: '#9ca3af', fontSize: '0.875rem', padding: '8px 0' }}>
                  No appointment scheduled
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}`,
    "frontend/src/components/dashboard/WidgetsSection.js": `import React, { useState, useEffect } from 'react';
import { ImageIcon, Settings } from 'lucide-react';
import axios from 'axios';

export default function WidgetsSection() {
  const [widgets, setWidgets] = useState([]);

  useEffect(() => {
    const loadWidgets = async () => {
      try {
        const response = await axios.get('http://localhost:3001/api/config');
        const data = response.data.widgets || [];
        const positionedWidgets = Array(4).fill(null);
        data.forEach(widget => {
          if (widget.is_active && widget.position >= 1 && widget.position <= 4) {
            positionedWidgets[widget.position - 1] = widget;
          }
        });
        setWidgets(positionedWidgets);
      } catch (error) {
        console.error('Failed to load widgets:', error);
      }
    };
    
    loadWidgets();
    const intervalId = setInterval(loadWidgets, 30000);
    return () => clearInterval(intervalId);
  }, []);

  const handleWidgetClick = (widget) => {
    if (!widget || !widget.launch_url) return;
    window.open(widget.launch_url, '_blank');
  };

  return (
    <div style={{ padding: '16px 0', height: '100%' }}>
      <div style={{
        borderRadius: '16px', padding: '12px', height: '100%', display: 'flex', flexDirection: 'column',
        backgroundColor: '#f8fafc', border: '1px solid #e5e7eb', boxShadow: '5px 5px 15px #e5e7eb, -5px -5px 15px #ffffff'
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
          <h2 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#1f2937' }}>Quick Access</h2>
          <a href="/#admin" style={{ 
            backgroundColor: '#e2e8f0', color: '#475569', borderRadius: '50%', width: '28px', height: '28px',
            display: 'flex', alignItems: 'center', justifyContent: 'center', textDecoration: 'none'
          }}><Settings size={16} /></a>
        </div>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', flexGrow: 1 }}>
          {widgets.map((widget, index) => (
            <div key={widget?.id || \`pos-\${index}\`} onClick={() => handleWidgetClick(widget)} style={{
              borderRadius: '12px', padding: '12px', display: 'flex', alignItems: 'center', gap: '16px',
              flex: '1', backgroundColor: '#ffffff', border: '1px solid #e2e8f0',
              boxShadow: '0 4px 12px rgba(0,0,0,0.08)', cursor: widget ? 'pointer' : 'default'
            }}>
              {widget ? (
                <>
                  {widget.icon_url ? <img src={widget.icon_url} alt="" style={{width: '64px', height: '64px', objectFit: 'contain'}} /> : <ImageIcon size={48} color="#ccc" />}
                  <div style={{ flexGrow: 1 }}>
                    <div style={{ fontWeight: 'bold', fontSize: '1.25rem', color: '#1e293b' }}>{widget.title_line_1}</div>
                    {widget.title_line_2 && <div style={{ fontSize: '1.125rem', color: '#64748b' }}>{widget.title_line_2}</div>}
                  </div>
                </>
              ) : (
                <>
                  <ImageIcon size={48} color="#ccc" />
                  <span style={{ color: '#94a3b8', fontSize: '1.125rem' }}>Position {index + 1}</span>
                </>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}`,
    "frontend/src/components/dashboard/FavoritePhotos.js": `import React, { useState, useEffect } from 'react';
import { ImageIcon } from 'lucide-react';
import axios from 'axios';

export default function FavoritePhotos() {
  const [photos, setPhotos] = useState([null, null, null, null]);

  useEffect(() => {
    const loadPhotos = async () => {
      try {
        const response = await axios.get('http://localhost:3001/api/config');
        const activePhotos = (response.data.photos || []).filter(p => p.is_active);
        const newPhotos = [null, null, null, null];
        activePhotos.forEach(photo => {
          if (photo.display_order >= 1 && photo.display_order <= 4) {
            newPhotos[photo.display_order - 1] = photo;
          }
        });
        setPhotos(newPhotos);
      } catch (error) {
        console.error('Failed to load photos:', error);
      }
    };
    loadPhotos();
    const intervalId = setInterval(loadPhotos, 30000);
    return () => clearInterval(intervalId);
  }, []);

  const renderPhotoFrame = (photo, index, flex) => (
    <div key={photo?.id || \`photo-\${index}\`} style={{
      backgroundColor: 'white', borderRadius: '12px', padding: '4px',
      boxShadow: '0 4px 6px rgba(0,0,0,0.1)', display: 'flex',
      flexDirection: 'column', overflow: 'hidden', flex: flex
    }}>
      {photo && photo.photo_url ? (
        <>
          <div style={{ flexGrow: 1, overflow: 'hidden', borderRadius: '8px' }}>
            <img src={photo.photo_url} alt={photo.title || ''} style={{ width: '100%', height: '100%', objectFit: 'cover' }} />
          </div>
          {photo.title && <div style={{ padding: '4px', textAlign: 'center', fontSize: '0.75rem', fontWeight: '600' }}>{photo.title}</div>}
        </>
      ) : (
        <div style={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', backgroundColor: '#f1f5f9', color: '#94a3b8' }}>
          <ImageIcon size={32} />
          <p style={{marginTop: '4px', fontSize: '12px'}}>Position {index + 1}</p>
        </div>
      )}
    </div>
  );

  return (
    <div style={{ padding: '16px 0', height: '100%' }}>
      <div style={{
        borderRadius: '16px', padding: '16px', height: '100%', display: 'flex', flexDirection: 'column',
        backgroundColor: '#f8fafc', border: '1px solid #e5e7eb', boxShadow: '5px 5px 15px #e5e7eb, -5px -5px 15px #ffffff'
      }}>
        <h2 style={{ fontSize: '1.5rem', fontWeight: '600', color: '#1f2937', marginBottom: '16px' }}>Favorite Photos</h2>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '12px', flexGrow: 1, minHeight: 0 }}>
          {renderPhotoFrame(photos[0], 0, '1.5')}
          <div style={{ display: 'flex', gap: '12px', flex: '1', minHeight: 0 }}>
            {renderPhotoFrame(photos[1], 1, '1')}
            {renderPhotoFrame(photos[2], 2, '1')}
          </div>
          {renderPhotoFrame(photos[3], 3, '1.5')}
        </div>
      </div>
    </div>
  );
}`,
    "frontend/src/components/dashboard/SmartTalkButton.js": `import React, { useState, useRef, useEffect } from 'react';
import { Mic, MicOff, Loader2, AlertTriangle } from 'lucide-react';
import axios from 'axios';
import { useVoice } from '../../context/VoiceProvider';

export default function SmartTalkButton() {
  const [buttonState, setButtonState] = useState('idle');
  const [statusText, setStatusText] = useState('Talk to Bob');
  const [commands, setCommands] = useState([]);
  const recognitionRef = useRef(null);
  const { isSpeaking } = useVoice();

  useEffect(() => {
    axios.get('http://localhost:3001/api/config').then(res => {
      setCommands(res.data.bob_commands || []);
    });
  }, []);

  const startListening = () => {
    if (!('webkitSpeechRecognition' in window)) {
      setStatusText('Not supported');
      return;
    }
    const recognition = new window.webkitSpeechRecognition();
    recognitionRef.current = recognition;
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'en-US';

    recognition.onstart = () => { setButtonState('listening'); setStatusText('Listening...'); };
    recognition.onend = () => { if (buttonState === 'listening') { setButtonState('idle'); setStatusText('Talk to Bob'); } };
    recognition.onerror = (e) => {
      setButtonState('error'); setStatusText(e.error === 'no-speech' ? 'No speech' : 'Error');
      setTimeout(() => { setButtonState('idle'); setStatusText('Talk to Bob'); }, 2000);
    };

    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript.trim().toLowerCase();
      setButtonState('processing');
      setStatusText('Thinking...');
      
      const foundCommand = commands.find(cmd => {
        if (!cmd.is_active) return false;
        const phrases = cmd.trigger_phrases.toLowerCase().split(',').map(p => p.trim());
        return phrases.some(phrase => transcript.includes(phrase));
      });

      if (foundCommand) {
        axios.post('http://localhost:3001/api/speak', { text: foundCommand.bob_response });
        if (foundCommand.action_url) {
          setTimeout(() => window.open(foundCommand.action_url, '_blank'), 1000);
        }
      } else {
        axios.post('http://localhost:3001/api/speak', { text: "I didn't understand that." });
      }
      setTimeout(() => { setButtonState('idle'); setStatusText('Talk to Bob'); }, 2000);
    };
    recognition.start();
  };

  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
  };

  const handleClick = () => {
    if (buttonState === 'listening') {
      stopListening();
    } else if (buttonState === 'idle' && !isSpeaking) {
      startListening();
    }
  };

  const getButtonState = () => {
    if (isSpeaking) return { state: 'speaking', text: 'Bob is speaking...', color: '#9333ea', icon: <MicOff size={20}/> };
    switch (buttonState) {
      case 'listening': return { state: 'listening', text: 'Listening...', color: '#dc2626', icon: <MicOff size={20}/> };
      case 'processing': return { state: 'processing', text: 'Thinking...', color: '#f59e0b', icon: <Loader2 size={20} className="animate-spin"/> };
      case 'error': return { state: 'error', text: 'Error', color: '#f97316', icon: <AlertTriangle size={20}/> };
      default: return { state: 'idle', text: 'Talk to Bob', color: '#2563eb', icon: <Mic size={20}/> };
    }
  };

  const current = getButtonState();

  return (
    <button onClick={handleClick} disabled={current.state !== 'idle' && current.state !== 'listening'} style={{
      width: '100%', height: '48px', fontSize: '1.125rem', fontWeight: '600',
      backgroundColor: current.color, color: 'white', border: 'none',
      borderRadius: '8px', cursor: 'pointer', display: 'flex',
      alignItems: 'center', justifyContent: 'center', gap: '8px', transition: 'background-color 0.2s'
    }}>
      {current.icon}
      <span>{current.text}</span>
    </button>
  );
}`,
    "frontend/src/components/admin/ScheduleAdmin.js": `import React, { useState, useEffect } from 'react';
import axios from 'axios';

const API_URL = 'http://localhost:3001/api/config';

export default function ScheduleAdmin() {
  const [items, setItems] = useState([]);
  const [status, setStatus] = useState('');

  useEffect(() => {
    axios.get(API_URL)
      .then(res => setItems(res.data.schedule || []))
      .catch(err => setStatus('Error loading schedule'));
  }, []);

  const handleInputChange = (index, field, value) => {
    const newItems = [...items];
    newItems[index][field] = value;
    setItems(newItems);
  };

  const handleAddItem = () => {
    setItems([...items, { id: Date.now(), title: '', start_time: '', end_time: '', voice_script: '', is_active: true }]);
  };
  
  const handleRemoveItem = (index) => {
    setItems(items.filter((_, i) => i !== index));
  }

  const handleSave = () => {
    setStatus('Saving...');
    axios.post(API_URL, { schedule: items })
      .then(() => setStatus('Saved successfully!'))
      .catch(() => setStatus('Error saving!'))
      .finally(() => setTimeout(() => setStatus(''), 2000));
  };

  return (
    <div style={{padding: '2rem'}}>
      <h2 style={{fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem'}}>Appointments</h2>
      {items.map((item, index) => (
        <div key={item.id || index} style={{display: 'grid', gridTemplateColumns: 'repeat(6, 1fr)', gap: '1rem', marginBottom: '1rem', alignItems: 'center'}}>
          <input type="time" value={item.start_time} onChange={e => handleInputChange(index, 'start_time', e.target.value)} style={{padding: '8px'}} />
          <input type="time" value={item.end_time} onChange={e => handleInputChange(index, 'end_time', e.target.value)} style={{padding: '8px'}} />
          <input placeholder="Title" value={item.title} onChange={e => handleInputChange(index, 'title', e.target.value)} style={{padding: '8px', gridColumn: 'span 2'}} />
          <input placeholder="Voice Script" value={item.voice_script} onChange={e => handleInputChange(index, 'voice_script', e.target.value)} style={{padding: '8px', gridColumn: 'span 2'}} />
          <label><input type="checkbox" checked={item.is_active} onChange={e => handleInputChange(index, 'is_active', e.target.checked)} /> Active</label>
          <button onClick={() => handleRemoveItem(index)} style={{padding: '8px', background: '#fee2e2', color: '#b91c1c', border: 'none', borderRadius: '4px'}}>Remove</button>
        </div>
      ))}
      <button onClick={handleAddItem} style={{padding: '8px 12px', marginRight: '1rem'}}>Add Item</button>
      <button onClick={handleSave} style={{padding: '8px 12px', background: '#dbeafe', color: '#1d4ed8'}}>Save Changes</button>
      {status && <span style={{marginLeft: '1rem'}}>{status}</span>}
    </div>
  );
}`,
    "frontend/src/components/admin/WidgetAdmin.js": `import React, { useState, useEffect } from 'react';
import axios from 'axios';

const API_URL = 'http://localhost:3001/api/config';

export default function WidgetAdmin() {
  const [widgets, setWidgets] = useState(Array(4).fill(null));
  const [status, setStatus] = useState('');

  useEffect(() => {
    axios.get(API_URL).then(res => {
      const fromApi = res.data.widgets || [];
      const newWidgets = Array(4).fill(null).map((_, i) => 
        fromApi.find(w => w.position === i + 1) || { position: i + 1, title_line_1: '', title_line_2: '', launch_url: '', is_active: false }
      );
      setWidgets(newWidgets);
    });
  }, []);

  const handleInputChange = (index, field, value) => {
    const newWidgets = [...widgets];
    newWidgets[index][field] = value;
    setWidgets(newWidgets);
  };
  
  const handleSave = () => {
    setStatus('Saving...');
    const widgetsToSave = widgets.filter(w => w.title_line_1);
    axios.post(API_URL, { widgets: widgetsToSave })
      .then(() => setStatus('Saved successfully!'))
      .catch(() => setStatus('Error saving!'))
      .finally(() => setTimeout(() => setStatus(''), 2000));
  };

  return (
    <div style={{padding: '2rem'}}>
      <h2 style={{fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem'}}>Quick Access Widgets</h2>
      {widgets.map((widget, index) => (
        <div key={index} style={{marginBottom: '1rem', border: '1px solid #ccc', padding: '1rem', borderRadius: '8px'}}>
          <h3 style={{marginTop: 0}}>Position {index + 1}</h3>
          <input placeholder="Title Line 1" value={widget?.title_line_1} onChange={e => handleInputChange(index, 'title_line_1', e.target.value)} style={{padding: '8px', width: '100%', marginBottom: '0.5rem'}} />
          <input placeholder="Title Line 2 (Optional)" value={widget?.title_line_2} onChange={e => handleInputChange(index, 'title_line_2', e.target.value)} style={{padding: '8px', width: '100%', marginBottom: '0.5rem'}} />
          <input placeholder="Launch URL" value={widget?.launch_url} onChange={e => handleInputChange(index, 'launch_url', e.target.value)} style={{padding: '8px', width: '100%', marginBottom: '0.5rem'}} />
          <label><input type="checkbox" checked={widget?.is_active} onChange={e => handleInputChange(index, 'is_active', e.target.checked)} /> Active</label>
        </div>
      ))}
      <button onClick={handleSave} style={{padding: '8px 12px', background: '#dbeafe', color: '#1d4ed8'}}>Save Changes</button>
      {status && <span style={{marginLeft: '1rem'}}>{status}</span>}
    </div>
  );
}`,
    "frontend/src/components/admin/PhotoAdmin.js": `import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';

const API_URL = 'http://localhost:3001/api/config';
const UPLOAD_URL = 'http://localhost:3001/api/photos/upload';

export default function PhotoAdmin() {
  const [photos, setPhotos] = useState(Array(4).fill(null));
  const [status, setStatus] = useState('');
  const fileInputRefs = useRef([]);

  useEffect(() => {
    axios.get(API_URL).then(res => {
      const fromApi = res.data.photos || [];
      const newPhotos = Array(4).fill(null).map((_, i) => 
        fromApi.find(p => p.display_order === i + 1) || { display_order: i + 1, title: '', photo_url: '', is_active: false }
      );
      setPhotos(newPhotos);
    });
  }, []);

  const handleInputChange = (index, field, value) => {
    const newPhotos = [...photos];
    newPhotos[index][field] = value;
    setPhotos(newPhotos);
  };
  
  const handleFileChange = (index, file) => {
    if (!file) return;
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = async () => {
      try {
        const response = await axios.post(UPLOAD_URL, { file: reader.result });
        if(response.data.success) {
          handleInputChange(index, 'photo_url', response.data.url);
        }
      } catch (error) {
        setStatus('Upload failed');
      }
    };
  };

  const handleSave = () => {
    setStatus('Saving...');
    const photosToSave = photos.filter(p => p.photo_url);
    axios.post(API_URL, { photos: photosToSave })
      .then(() => setStatus('Saved successfully!'))
      .catch(() => setStatus('Error saving!'))
      .finally(() => setTimeout(() => setStatus(''), 2000));
  };

  return (
    <div style={{padding: '2rem'}}>
      <h2 style={{fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem'}}>Favorite Photos</h2>
      {photos.map((photo, index) => (
        <div key={index} style={{marginBottom: '1rem', border: '1px solid #ccc', padding: '1rem', borderRadius: '8px'}}>
          <h3 style={{marginTop: 0}}>Position {index + 1}</h3>
          {photo?.photo_url && <img src={photo.photo_url} alt="" style={{maxWidth: '100px', maxHeight: '100px', marginBottom: '0.5rem'}} />}
          <input type="file" ref={el => fileInputRefs.current[index] = el} onChange={e => handleFileChange(index, e.target.files[0])} style={{display: 'block', marginBottom: '0.5rem'}}/>
          <input placeholder="Title" value={photo?.title} onChange={e => handleInputChange(index, 'title', e.target.value)} style={{padding: '8px', width: '100%', marginBottom: '0.5rem'}} />
          <label><input type="checkbox" checked={photo?.is_active} onChange={e => handleInputChange(index, 'is_active', e.target.checked)} /> Active</label>
        </div>
      ))}
      <button onClick={handleSave} style={{padding: '8px 12px', background: '#dbeafe', color: '#1d4ed8'}}>Save Changes</button>
      {status && <span style={{marginLeft: '1rem'}}>{status}</span>}
    </div>
  );
}`,
    "frontend/src/components/admin/VoicePromptAdmin.js": `import React, { useState, useEffect } from 'react';
import axios from 'axios';

const API_URL = 'http://localhost:3001/api/config';

export default function VoicePromptAdmin() {
  const [prompts, setPrompts] = useState([]);
  const [status, setStatus] = useState('');

  useEffect(() => {
    axios.get(API_URL).then(res => setPrompts(res.data.voice_prompts || []));
  }, []);

  const handleInputChange = (index, field, value) => {
    const newPrompts = [...prompts];
    newPrompts[index][field] = value;
    setPrompts(newPrompts);
  };
  
  const handleAddItem = () => {
    setPrompts([...prompts, { id: Date.now(), time: '', script: '', is_active: true }]);
  };
  
  const handleRemoveItem = (index) => {
    setPrompts(prompts.filter((_, i) => i !== index));
  }

  const handleSave = () => {
    setStatus('Saving...');
    axios.post(API_URL, { voice_prompts: prompts })
      .then(() => setStatus('Saved successfully!'))
      .catch(() => setStatus('Error saving!'))
      .finally(() => setTimeout(() => setStatus(''), 2000));
  };

  return (
    <div style={{padding: '2rem'}}>
      <h2 style={{fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem'}}>Scheduled Voice Prompts</h2>
      {prompts.map((prompt, index) => (
        <div key={prompt.id || index} style={{display: 'grid', gridTemplateColumns: '1fr 3fr 1fr 1fr', gap: '1rem', marginBottom: '1rem', alignItems: 'center'}}>
          <input type="time" value={prompt.time} onChange={e => handleInputChange(index, 'time', e.target.value)} style={{padding: '8px'}} />
          <input placeholder="Script to speak" value={prompt.script} onChange={e => handleInputChange(index, 'script', e.target.value)} style={{padding: '8px'}} />
          <label><input type="checkbox" checked={prompt.is_active} onChange={e => handleInputChange(index, 'is_active', e.target.checked)} /> Active</label>
          <button onClick={() => handleRemoveItem(index)} style={{padding: '8px', background: '#fee2e2', color: '#b91c1c', border: 'none', borderRadius: '4px'}}>Remove</button>
        </div>
      ))}
      <button onClick={handleAddItem} style={{padding: '8px 12px', marginRight: '1rem'}}>Add Prompt</button>
      <button onClick={handleSave} style={{padding: '8px 12px', background: '#dbeafe', color: '#1d4ed8'}}>Save Changes</button>
      {status && <span style={{marginLeft: '1rem'}}>{status}</span>}
    </div>
  );
}`,
    "frontend/src/components/admin/BobCommandAdmin.js": `import React, { useState, useEffect } from 'react';
import axios from 'axios';

const API_URL = 'http://localhost:3001/api/config';

export default function BobCommandAdmin() {
  const [commands, setCommands] = useState([]);
  const [status, setStatus] = useState('');

  useEffect(() => {
    axios.get(API_URL).then(res => setCommands(res.data.bob_commands || []));
  }, []);

  const handleInputChange = (index, field, value) => {
    const newCommands = [...commands];
    newCommands[index][field] = value;
    setCommands(newCommands);
  };

  const handleAddItem = () => {
    setCommands([...commands, { id: Date.now(), trigger_phrases: '', bob_response: '', action_url: '', is_active: true }]);
  };

  const handleRemoveItem = (index) => {
    setCommands(commands.filter((_, i) => i !== index));
  };

  const handleSave = () => {
    setStatus('Saving...');
    axios.post(API_URL, { bob_commands: commands })
      .then(() => setStatus('Saved successfully!'))
      .catch(() => setStatus('Error saving!'))
      .finally(() => setTimeout(() => setStatus(''), 2000));
  };

  return (
    <div style={{padding: '2rem'}}>
      <h2 style={{fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem'}}>Bob Voice Commands</h2>
      {commands.map((command, index) => (
        <div key={command.id || index} style={{border: '1px solid #ccc', padding: '1rem', borderRadius: '8px', marginBottom: '1rem'}}>
          <textarea placeholder="Trigger Phrases (comma separated)" value={command.trigger_phrases} onChange={e => handleInputChange(index, 'trigger_phrases', e.target.value)} style={{padding: '8px', width: '100%', marginBottom: '0.5rem'}} />
          <textarea placeholder="Bob's Response" value={command.bob_response} onChange={e => handleInputChange(index, 'bob_response', e.target.value)} style={{padding: '8px', width: '100%', marginBottom: '0.5rem'}} />
          <input placeholder="Action URL (Optional)" value={command.action_url} onChange={e => handleInputChange(index, 'action_url', e.target.value)} style={{padding: '8px', width: '100%', marginBottom: '0.5rem'}} />
          <label><input type="checkbox" checked={command.is_active} onChange={e => handleInputChange(index, 'is_active', e.target.checked)} /> Active</label>
          <button onClick={() => handleRemoveItem(index)} style={{padding: '4px 8px', background: '#fee2e2', color: '#b91c1c', border: 'none', borderRadius: '4px', float: 'right'}}>Remove</button>
        </div>
      ))}
      <button onClick={handleAddItem} style={{padding: '8px 12px', marginRight: '1rem'}}>Add Command</button>
      <button onClick={handleSave} style={{padding: '8px 12px', background: '#dbeafe', color: '#1d4ed8'}}>Save Changes</button>
      {status && <span style={{marginLeft: '1rem'}}>{status}</span>}
    </div>
  );
}`,
    "frontend/src/components/admin/VoiceSettingsAdmin.js": `import React, { useState, useEffect } from 'react';
import axios from 'axios';

const API_URL = 'http://localhost:3001/api/config';

export default function VoiceSettingsAdmin() {
  const [settings, setSettings] = useState({
    elevenlabs_api_key: '',
    elevenlabs_voice_id: '',
    weather_location: '',
    settings: {
        reminder_template_60_min: '',
        reminder_template_30_min: '',
        schedule_readout_template: '',
        model_id: '',
        stability: 0.5,
        similarity_boost: 0.75,
        style: 0.5
    }
  });
  const [status, setStatus] = useState('');

  useEffect(() => {
    axios.get(API_URL).then(res => {
      setSettings(prev => ({...prev, ...res.data}));
    });
  }, []);

  const handleChange = (field, value) => {
    setSettings(prev => ({...prev, [field]: value}));
  };
  
  const handleSubChange = (field, value) => {
    setSettings(prev => ({...prev, settings: {...prev.settings, [field]: value}}));
  };

  const handleSave = () => {
    setStatus('Saving...');
    axios.post(API_URL, settings)
      .then(() => setStatus('Saved successfully!'))
      .catch(() => setStatus('Error saving!'))
      .finally(() => setTimeout(() => setStatus(''), 2000));
  };
  
  if (!settings.settings) return <div>Loading...</div>;

  return (
    <div style={{padding: '2rem'}}>
      <h2 style={{fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem'}}>Voice & General Settings</h2>
      <div style={{display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem', marginBottom: '1rem'}}>
        <input type="password" placeholder="ElevenLabs API Key" value={settings.elevenlabs_api_key} onChange={e => handleChange('elevenlabs_api_key', e.target.value)} style={{padding: '8px'}} />
        <input placeholder="ElevenLabs Voice ID" value={settings.elevenlabs_voice_id} onChange={e => handleChange('elevenlabs_voice_id', e.target.value)} style={{padding: '8px'}} />
      </div>
      <input placeholder="Weather Location (e.g. Sydney, AU)" value={settings.weather_location} onChange={e => handleChange('weather_location', e.target.value)} style={{padding: '8px', width: '100%', marginBottom: '1rem'}} />
      
      <h3 style={{fontSize: '1.2rem', fontWeight: 'bold', marginTop: '2rem'}}>Voice Templates</h3>
      <textarea placeholder="60-min reminder" value={settings.settings.reminder_template_60_min} onChange={e => handleSubChange('reminder_template_60_min', e.target.value)} style={{width: '100%', padding: '8px', minHeight: '60px', marginBottom: '0.5rem'}} />
      <textarea placeholder="30-min reminder" value={settings.settings.reminder_template_30_min} onChange={e => handleSubChange('reminder_template_30_min', e.target.value)} style={{width: '100%', padding: '8px', minHeight: '60px', marginBottom: '0.5rem'}} />
      <textarea placeholder="Schedule readout" value={settings.settings.schedule_readout_template} onChange={e => handleSubChange('schedule_readout_template', e.target.value)} style={{width: '100%', padding: '8px', minHeight: '60px', marginBottom: '1rem'}} />
      
      <button onClick={handleSave} style={{padding: '8px 12px', background: '#dbeafe', color: '#1d4ed8'}}>Save Changes</button>
      {status && <span style={{marginLeft: '1rem'}}>{status}</span>}
    </div>
  );
}`,
  };
  
  return (
    <div style={{ padding: '20px', fontFamily: 'sans-serif' }}>
      <div style={{ backgroundColor: '#fffbe6', border: '1px solid #ffe58f', padding: '20px', borderRadius: '8px', marginBottom: '2rem' }}>
        <h1 style={{ marginTop: 0 }}>The System: A Foolproof Hand-off Plan</h1>
        
        <h2>Instructions for You</h2>
        <ol>
          <li>Give your developer the link to this page.</li>
          <li>Tell them to follow the "Instructions for Developer" below.</li>
          <li>Once they are done, they will send you back a list of "digital fingerprints" (hashes).</li>
          <li>Give that list back to me, and I will verify that every file is a 100% perfect copy.</li>
        </ol>

        <h2>Instructions for Developer</h2>
        <p>Please follow these steps exactly to prevent any errors:</p>
        <ol>
          <li>Create the complete file and folder structure as shown below.</li>
          <li>For each file path listed, copy the entire code block provided and paste it into the corresponding empty file.</li>
          <li>Once all files are created, run the verification command to generate the "digital fingerprints" and send the resulting list back.</li>
        </ol>
        
        <h3>Verification Command (Digital Fingerprint)</h3>
        <p>After creating all files, navigate to the project's root directory in your terminal and run the appropriate command for your system:</p>
        <ul>
          <li><strong>On macOS or Linux:</strong> <code>find . -type f \\( -name "*.js" -o -name "*.json" -o -name "*.css" -o -name "*.html" \\) -not -path "./node_modules/*" | xargs sha256sum</code></li>
          <li><strong>On Windows (PowerShell):</strong> <code>Get-ChildItem -Recurse -Include *.js,*.json,*.css,*.html -Exclude node_modules | Get-FileHash -Algorithm SHA256 | Format-List Path, Hash</code></li>
        </ul>
        <p>Send the output of this command back for verification.</p>
      </div>

      <h2 style={{marginTop: '2rem'}}>Project File Structure</h2>
       <pre style={{ background: '#f0f0f0', padding: '8px', overflow: 'auto' }}>{`C:\\ray-dashboard\\
├── backend\\
│   ├── server.js
│   └── package.json
└── frontend\\
    ├── package.json
    ├── public\\
    │   └── index.html
    └── src\\
        ├── index.js
        ├── index.css
        ├── App.js
        ├── components\\
        │   ├── dashboard\\
        │   │   ├── HeaderBar.js
        │   │   ├── ScheduleSection.js
        │   │   ├── WidgetsSection.js
        │   │   ├── FavoritePhotos.js
        │   │   └── SmartTalkButton.js
        │   ├── admin\\
        │   │   ├── ScheduleAdmin.js
        │   │   ├── WidgetAdmin.js
        │   │   ├── PhotoAdmin.js
        │   │   ├── VoicePromptAdmin.js
        │   │   ├── BobCommandAdmin.js
        │   │   └── VoiceSettingsAdmin.js
        │   └── context\\
        │       └── VoiceProvider.js
        └── pages\\
            ├── Dashboard.js
            └── Admin.js`}</pre>

      <h2 style={{marginTop: '2rem'}}>File Contents</h2>
      {Object.keys(fileContents).map(path => <CodeBlock key={path} title={path} content={fileContents[path]} />)}
    </div>
  );
